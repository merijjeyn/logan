{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logan Log Viewer - End-to-End Test\n",
    "\n",
    "This notebook demonstrates how to use the Logan log viewer package."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the Logan package\n",
    "from logan import Logan\n",
    "import time\n",
    "\n",
    "# Initialize Logan log viewer (this will start the web server)\n",
    "Logan.init()  # Using port 5002 to avoid conflicts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test Different Log Types\n",
    "\n",
    "Now let's test different types of log messages:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test info logs\n",
    "Logan.info(\"Application started successfully\", namespace=\"app\")\n",
    "Logan.info(\"User logged in\", namespace=\"auth\")\n",
    "Logan.info(\"Database connection established\", namespace=\"database\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test warning logs\n",
    "Logan.warn(\"API rate limit approaching\", namespace=\"api\")\n",
    "Logan.warn(\"Memory usage is high\", namespace=\"system\")\n",
    "Logan.warn(\"Deprecated function called\", namespace=\"app\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test error logs\n",
    "Logan.error(\"Failed to connect to external service\", namespace=\"api\")\n",
    "Logan.error(\"Configuration file not found\", namespace=\"config\")\n",
    "Logan.error(\"Invalid user credentials\", namespace=\"auth\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test debug logs\n",
    "Logan.debug(\"Processing user request\", namespace=\"request\")\n",
    "Logan.debug(\"Cache hit for user data\", namespace=\"cache\")\n",
    "Logan.debug(\"SQL query executed in 23ms\", namespace=\"database\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(1010):\n",
    "    namespace = i % 15\n",
    "    Logan.debug(f\"Batch processing item {i+1}/1000\", namespace=f\"batch_{namespace}\")\n",
    "    time.sleep(0.1)  # Small delay to see the real-time updates\n",
    "Logan.debug(f\"Batch processing completed\", namespace=\"batch\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test Exception Logging\n",
    "\n",
    "Let's test how Logan handles exceptions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test exception logging\n",
    "try:\n",
    "    # Simulate a division by zero error\n",
    "    result = 10 / 0\n",
    "except Exception as e:\n",
    "    Logan.error(\"Math operation failed\", namespace=\"math\", exception=e)\n",
    "\n",
    "try:\n",
    "    # Simulate a file not found error\n",
    "    with open(\"nonexistent_file.txt\", \"r\") as f:\n",
    "        content = f.read()\n",
    "except Exception as e:\n",
    "    Logan.error(\"File operation failed\", namespace=\"fileio\", exception=e)\n",
    "\n",
    "try:\n",
    "    # Simulate a type error\n",
    "    result = \"string\" + 42\n",
    "except Exception as e:\n",
    "    Logan.error(\"Type conversion failed\", namespace=\"conversion\", exception=e)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test Default Namespace\n",
    "\n",
    "Test logging with the default namespace:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test default namespace (should be \"global\")\n",
    "Logan.info(\"\"\"\n",
    "This message uses the default namespace\n",
    "This message uses the default namespace\n",
    "This message uses the default namespace\n",
    "This message uses the default namespace\n",
    "This message uses the default namespace\n",
    "This message uses the default namespace\n",
    "\n",
    "This message uses the default namespace\n",
    "This message uses the default namespace\n",
    "This message uses the default namespace\n",
    "This message uses the default namespace\n",
    "varsThis message uses the default namespace\n",
    "This message uses the default namespace\n",
    "This message uses the default namespace\n",
    "This message uses the default namespace\n",
    "This message uses the default namespace\n",
    "This message uses the default namespace\n",
    "\"\"\")\n",
    "Logan.info(\"Another message with default settings\")\n",
    "Logan.warn(\"Warning with default namespace\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulate Real Application Logging\n",
    "\n",
    "Let's simulate logging from a real application scenario:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Simulate a web application request processing\n",
    "def simulate_request_processing():\n",
    "    Logan.info(\"Received new HTTP request\", namespace=\"web\")\n",
    "    Logan.debug(\"Validating request parameters\", namespace=\"web\")\n",
    "    Logan.debug(\"Authenticating user\", namespace=\"auth\")\n",
    "    Logan.info(\"User authenticated successfully\", namespace=\"auth\")\n",
    "    Logan.debug(\"Querying database for user data\", namespace=\"database\")\n",
    "    Logan.info(\"Database query completed in 150ms\", namespace=\"database\")\n",
    "    Logan.debug(\"Generating response\", namespace=\"web\")\n",
    "    Logan.info(\"Request completed successfully\", namespace=\"web\")\n",
    "\n",
    "# Run the simulation\n",
    "simulate_request_processing()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Simulate some error scenarios\n",
    "def simulate_error_scenarios():\n",
    "    Logan.warn(\"Database connection timeout\", namespace=\"database\")\n",
    "    Logan.info(\"Retrying database connection\", namespace=\"database\")\n",
    "    Logan.info(\"Connection restored\", namespace=\"database\")\n",
    "    \n",
    "    # Simulate an actual exception\n",
    "    try:\n",
    "        # Simulate a network error\n",
    "        raise ConnectionError(\"Network unreachable\")\n",
    "    except Exception as e:\n",
    "        Logan.error(\"Network operation failed\", namespace=\"network\", exception=e)\n",
    "    \n",
    "    Logan.warn(\"Fallback to cached data\", namespace=\"cache\")\n",
    "    Logan.info(\"Request completed with cached data\", namespace=\"web\")\n",
    "\n",
    "# Run the error simulation\n",
    "simulate_error_scenarios()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test High Volume Logging\n",
    "\n",
    "Let's test how Logan handles multiple rapid log messages:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test rapid logging\n",
    "print(\"Sending 20 rapid log messages...\")\n",
    "for i in range(20):\n",
    "    Logan.debug(f\"Batch processing item {i+1}/20\", namespace=\"batch\")\n",
    "    time.sleep(0.1)  # Small delay to see the real-time updates\n",
    "\n",
    "Logan.info(\"Batch processing completed\", namespace=\"batch\")\n",
    "print(\"âœ… Rapid logging test completed!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test Complete!\n",
    "\n",
    "ðŸŽ‰ **Congratulations!** You've successfully tested the Logan log viewer.\n",
    "\n",
    "### What to check in the web UI:\n",
    "\n",
    "1. **Visit http://localhost:5002** to see all the logs\n",
    "2. **Filter by type**: Try selecting different log types (info, warning, error, debug)\n",
    "3. **Filter by namespace**: Try filtering by different namespaces (web, auth, database, etc.)\n",
    "4. **Click on logs**: Click any log entry to expand and see:\n",
    "   - Full message details\n",
    "   - Call stack information\n",
    "   - Exception details (for error logs with exceptions)\n",
    "5. **Real-time updates**: The logs should appear instantly as they're generated\n",
    "6. **Clear functions**: Try the \"Clear Logs\" and \"Clear Filters\" buttons\n",
    "\n",
    "### Features demonstrated:\n",
    "\n",
    "âœ… **Different log types** with proper color coding  \n",
    "âœ… **Multiple namespaces** for organizing logs  \n",
    "âœ… **Exception logging** with full stack traces  \n",
    "âœ… **Real-time streaming** using Server-Sent Events  \n",
    "âœ… **Filtering capabilities** by type and namespace  \n",
    "âœ… **Expandable log details** with call stack information  \n",
    "âœ… **High-volume logging** performance  \n",
    "\n",
    "The Logan log viewer is now ready for use in your Python applications!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "logan_env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
